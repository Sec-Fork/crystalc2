#!/bin/python3
import yaml
from yaml.loader import SafeLoader
from server.models import ListenerModel
from typing import List
from server.server import AgentModule, CrystalServer
from lib.helpers.output import Color, failure, get_random_string, printinfo, success
import os, sys
import random, requests
from cmd import Cmd

def get_banner():
    banners = [
        f"""{Color.P}
                              __         .__   
  ___________ ___.__. _______/  |______  |  |  
_/ ___\_  __ <   |  |/  ___/\   __\__  \ |  |  
\  \___|  | \/\___  |\___ \  |  |  / __ \|  |__
 \___  >__|   / ____/____  > |__| (____  /____/
     \/       \/         \/            \/      
"""
    ]

    subline = "\ncrystal C2 v0.0.1\n"
    return f"{random.choice(banners)}{Color.B}{subline}{Color.NC}"

API_BASE = "http://127.0.0.1:9292" # default overwritten by config

class Api:
    @staticmethod
    def get_available_agents() -> List[AgentModule]:
        """
        Get a list of available agent modules
        """
        available_agent_modules = requests.get(f'{API_BASE}/api/agents/modules').json()['data']
        return available_agent_modules

    @staticmethod
    def get_active_agents():
        """
        Get all currently active agents
        """
        agents = requests.get(f'{API_BASE}/api/agents').json()['data']
        return agents

    @staticmethod
    def get_listeners():
        """
        Get active listeners
        """
        listeners = requests.get(f'{API_BASE}/api/listeners').json()['data']
        return listeners

    @staticmethod
    def create_listener(listen_ip="127.0.0.1", port=1337, name=""):
        """
        Create a new listener and return that listener as JSON if successfull
        """
        if name == "":
            name = get_random_string(8)

        response = requests.post(
            f'{API_BASE}/api/listeners',
            data={
                "name": name,
                "ip_address": listen_ip,
                "port": port
            }
        )
        
        if response.status_code == 500:
            raise ValueError('The listener could not be created.') # TODO create exception class
        else:
            return response

    @staticmethod
    def add_agent_task(agent_name, command):
        """
        Add a task to the agent supplied
        """
        requests.post(
            f'{API_BASE}/api/tasks/{agent_name}',
                data={
                    "task": command
                }
        )



class BaseConsole(Cmd):
    """
    Base console. All commands defined here are available in every console
    """
    emptyline = lambda x: None

    def __init__(self, encapsulating_console = None):
        super().__init__()
        self.encapsulating_console = encapsulating_console

    def cmdloop(self):
        try:
            Cmd.cmdloop(self)

        except KeyboardInterrupt as e:
            try:
                choice = input(f"\n{Color.R}[!]{Color.NC} Exit? [y/N]")
                if choice.lower() != "" and choice.lower()[0] == "y":
                    sys.exit(0)
                else:
                    self.cmdloop()
            except KeyboardInterrupt as e:
                print("")
                self.cmdloop()

    def do_exit(self, inp):
        sys.exit(0)

    def help_exit(self):
        print("Exit the console. You can also use the Ctrl-D shortcut")

    def do_interact(self, agent_name):
        'Interact with an active agent'
        for a in Api.get_active_agents():
            if a["name"] == agent_name: 
                InteractAgentConsole(a, self).cmdloop()
                return
        
        failure(f"{agent_name} is not an active agent name")

    def complete_interact(self, text, line, begidx, endidx):
        return [a['name'] for a in Api.get_active_agents() if a['name'].startswith(text)]

    def do_agents(self, args):
        'List all agents'
        print("IP\t\tName\tHostname\tUser")
        print("----------------------------------")
        for a in Api.get_active_agents():
            print(f"{a['ip_address']}\t{a['name']}\t{a['hostname']}\t{a['username']}") # TODO info about session

    def do_listeners(self, args):
        'List all listeners'
        print("IP\t\tPort\tName")
        print("----------------------------------")
        for l in Api.get_listeners():
            print(f"{l['ip_address']}\t{l['port']}\t{l['name']}")

    do_EOF = do_exit
    help_EOF = help_exit

    def do_back(self, args):
        'Go back to the encapsulating console'
        if self.encapsulating_console:
            self.encapsulating_console.cmdloop()
        else:
            print(f"{Color.R}[!]{Color.NC} Type 'exit' to exit.")

class InteractAgentConsole(BaseConsole):
    """
    Console to interact with an agent
    """
    def __init__(self, selected_agent, encapsulating_console: Cmd):
        super().__init__(encapsulating_console)
        self.selected_agent = selected_agent
        self.prompt = f"({Color.B}crystal{Color.NC}) {selected_agent['name']} -> {Color.G}{selected_agent['username']}{Color.NC}@{Color.G}{selected_agent['ip_address']}{Color.NC} > "

    def default(self, command):
        'Default action: Send a shell command to run to the agents queue'
        Api.add_agent_task(self.selected_agent['name'], f"shell {command}")
        success(f"Queued command: {command} to agent {self.selected_agent['name']}")

    def do_terminate(self, args):
        'Terminate the agent'
        raise NotImplementedError

class CreateAgentConsole(BaseConsole):
    """
    Agent creation wizard
    """
    def __init__(self, selected_agent, encapsulating_console: Cmd):
        super().__init__(encapsulating_console)
        self.selected_agent = selected_agent
        self.prompt = f"({Color.B}crystal{Color.NC}) {Color.G}agent/{selected_agent['name']}{Color.NC} > "
    
    options = {
        "listener" : {
            "name": "listener",
            "required": True,
            "value": "",
            "description": "Name of the listener to connect back to",
            "validation": lambda x: x in [l['name'] for l in Api.get_listeners()],
            "completion": lambda x: [l['name'] for l in Api.get_listeners() if l['name'].startswith(x)]
        }
    }

    def do_options(self, args):
        'Show available options'
        for _, o in self.options.items():
            print("Option\t\tCurrent value\t\tRequired\tDescription")
            print("-------------------------------------------------------------------------------------")
            print(f'{o["name"]}\t{o["value"]}\t\t{o["required"]}\t\t{o["description"]}')
    
    def do_set(self, option):
        'Set an option'
        try:
            option, value = option.split()
            if option in self.options.keys() and value != '':
                if self.options[option]["validation"](value):
                    self.options[option]["value"] = value
                    success(f"Set {self.options[option]['name']} to {value}")
                else:
                    failure(f"{value} is not a valid option for {self.options[option]['name']}")
        except:
            print("Usage: set OPTION VALUE")

    def complete_set(self, text, line, begidx, endidx):
        try:
            option, value = text.split()
            if option in self.options.keys():
                return self.options[option]["completion"](value)
        except:
            return [option for option in self.options if option.startswith(text)]

    def do_generate(self, args):
        'Generate a payload for the current module'
        script = self.selected_agent['generate_script']
        os.system(f"python3 {script}")


class CrystalConsole(BaseConsole):
    """
    Main console
    """
    prompt = f"({Color.B}crystal{Color.NC}) > "

    # print banner
    def do_banner(self, args):
        'Show a random banner'
        print(get_banner())

    # create listener
    def do_createlistener(self, args):
        'Create a listener'
        # TODO port, ip etc in subconsole
        try:
            response = Api.create_listener() 
            created = response.json()
            success(f"Listener {created['name']} listening on {created['ip_address']}:{created['port']}")
        except ValueError as e:
            failure(e)
            
    # create agent
    def do_createagent(self, selected_agent):
        'Create an agent'
        if selected_agent == "" or selected_agent == None:
            print("Usage: createagent <AGENT_MODULE>")
        else:
            # pass agent to subconsole to access options etc
            for agent in Api.get_available_agents():
                if agent['name'] == selected_agent:
                    CreateAgentConsole(agent, self).cmdloop()
    
    def complete_createagent(self, text, line, begidx, endidx):
        return [agent['name'] for agent in Api.get_available_agents() if agent['name'].startswith(text)]


if __name__ == '__main__':

    if len(sys.argv) != 2:
        print("Usage: crystalc2 [server | client]")

    print(get_banner())

    if sys.argv[1] not in ["server", "client"]:
        print("Usage: crystalc2 [server | client]")
        sys.exit(1)

    success("Reading config from config.yaml")
    with open("config.yaml") as f: 
        data = yaml.load(f, Loader=SafeLoader)
        LISTEN_PORT = data['listen_port']
        LISTEN_IP   = data['listen_ip']
        API_BASE    = data['api_base']

    if sys.argv[1] == "server":
        CrystalServer(LISTEN_PORT, LISTEN_IP).cmdloop()

    elif sys.argv[1] == "client":
        try:
            active_listeners = Api.get_listeners()
        except:
            failure("Could not connect to server.")
            sys.exit(1)

        success("Connected to server.")
        if len(active_listeners):
            printinfo(f"Found {len(active_listeners)} active listeners. Type 'listeners' to view them.")
        printinfo(f"Starting console...")
        print()
        CrystalConsole().cmdloop()
        